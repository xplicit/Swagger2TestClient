// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TestClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for QueryRockstarsOperations.
    /// </summary>
    public static partial class QueryRockstarsOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='orderByDesc'>
            /// </param>
            /// <param name='include'>
            /// </param>
            /// <param name='fields'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static QueryResponseRockstar Get(this IQueryRockstarsOperations operations, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string orderByDesc = default(string), string include = default(string), string fields = default(string), object meta = default(object), string format = "json")
            {
                return operations.GetAsync(skip, take, orderBy, orderByDesc, include, fields, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='orderByDesc'>
            /// </param>
            /// <param name='include'>
            /// </param>
            /// <param name='fields'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResponseRockstar> GetAsync(this IQueryRockstarsOperations operations, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string orderByDesc = default(string), string include = default(string), string fields = default(string), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(skip, take, orderBy, orderByDesc, include, fields, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='orderByDesc'>
            /// </param>
            /// <param name='include'>
            /// </param>
            /// <param name='fields'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static QueryResponseRockstar Create(this IQueryRockstarsOperations operations, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string orderByDesc = default(string), string include = default(string), string fields = default(string), object meta = default(object), string format = "json")
            {
                return operations.CreateAsync(skip, take, orderBy, orderByDesc, include, fields, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='orderByDesc'>
            /// </param>
            /// <param name='include'>
            /// </param>
            /// <param name='fields'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResponseRockstar> CreateAsync(this IQueryRockstarsOperations operations, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string orderByDesc = default(string), string include = default(string), string fields = default(string), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(skip, take, orderBy, orderByDesc, include, fields, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='orderByDesc'>
            /// </param>
            /// <param name='include'>
            /// </param>
            /// <param name='fields'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static QueryResponseRockstar Post(this IQueryRockstarsOperations operations, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string orderByDesc = default(string), string include = default(string), string fields = default(string), object meta = default(object), string format = "json")
            {
                return operations.PostAsync(skip, take, orderBy, orderByDesc, include, fields, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='orderByDesc'>
            /// </param>
            /// <param name='include'>
            /// </param>
            /// <param name='fields'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResponseRockstar> PostAsync(this IQueryRockstarsOperations operations, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string orderByDesc = default(string), string include = default(string), string fields = default(string), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(skip, take, orderBy, orderByDesc, include, fields, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='orderByDesc'>
            /// </param>
            /// <param name='include'>
            /// </param>
            /// <param name='fields'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static QueryResponseRockstar Delete(this IQueryRockstarsOperations operations, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string orderByDesc = default(string), string include = default(string), string fields = default(string), object meta = default(object), string format = "json")
            {
                return operations.DeleteAsync(skip, take, orderBy, orderByDesc, include, fields, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='orderByDesc'>
            /// </param>
            /// <param name='include'>
            /// </param>
            /// <param name='fields'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResponseRockstar> DeleteAsync(this IQueryRockstarsOperations operations, int? skip = default(int?), int? take = default(int?), string orderBy = default(string), string orderByDesc = default(string), string include = default(string), string fields = default(string), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(skip, take, orderBy, orderByDesc, include, fields, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
