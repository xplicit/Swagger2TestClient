// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TestClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AuthenticateOperations.
    /// </summary>
    public static partial class AuthenticateOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static AuthenticateResponse Get(this IAuthenticateOperations operations, string provider = default(string), string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json")
            {
                return operations.GetAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticateResponse> GetAsync(this IAuthenticateOperations operations, string provider = default(string), string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static AuthenticateResponse Create(this IAuthenticateOperations operations, string provider = default(string), string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json")
            {
                return operations.CreateAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticateResponse> CreateAsync(this IAuthenticateOperations operations, string provider = default(string), string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static AuthenticateResponse Post(this IAuthenticateOperations operations, string provider = default(string), string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json")
            {
                return operations.PostAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticateResponse> PostAsync(this IAuthenticateOperations operations, string provider = default(string), string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static AuthenticateResponse Delete(this IAuthenticateOperations operations, string provider = default(string), string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json")
            {
                return operations.DeleteAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticateResponse> DeleteAsync(this IAuthenticateOperations operations, string provider = default(string), string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static AuthenticateResponse Get1(this IAuthenticateOperations operations, string provider, string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json")
            {
                return operations.Get1Async(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticateResponse> Get1Async(this IAuthenticateOperations operations, string provider, string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get1WithHttpMessagesAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static AuthenticateResponse Create1(this IAuthenticateOperations operations, string provider, string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json")
            {
                return operations.Create1Async(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticateResponse> Create1Async(this IAuthenticateOperations operations, string provider, string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Create1WithHttpMessagesAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static AuthenticateResponse Post1(this IAuthenticateOperations operations, string provider, string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json")
            {
                return operations.Post1Async(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticateResponse> Post1Async(this IAuthenticateOperations operations, string provider, string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post1WithHttpMessagesAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static AuthenticateResponse Delete1(this IAuthenticateOperations operations, string provider, string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json")
            {
                return operations.Delete1Async(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticateResponse> Delete1Async(this IAuthenticateOperations operations, string provider, string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Delete1WithHttpMessagesAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static AuthenticateResponse Get2(this IAuthenticateOperations operations, string provider = default(string), string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json")
            {
                return operations.Get2Async(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticateResponse> Get2Async(this IAuthenticateOperations operations, string provider = default(string), string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get2WithHttpMessagesAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static AuthenticateResponse Create2(this IAuthenticateOperations operations, string provider = default(string), string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json")
            {
                return operations.Create2Async(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticateResponse> Create2Async(this IAuthenticateOperations operations, string provider = default(string), string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Create2WithHttpMessagesAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static AuthenticateResponse Post2(this IAuthenticateOperations operations, string provider = default(string), string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json")
            {
                return operations.Post2Async(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticateResponse> Post2Async(this IAuthenticateOperations operations, string provider = default(string), string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post2WithHttpMessagesAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static AuthenticateResponse Delete2(this IAuthenticateOperations operations, string provider = default(string), string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json")
            {
                return operations.Delete2Async(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticateResponse> Delete2Async(this IAuthenticateOperations operations, string provider = default(string), string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Delete2WithHttpMessagesAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static AuthenticateResponse Get3(this IAuthenticateOperations operations, string provider, string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json")
            {
                return operations.Get3Async(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticateResponse> Get3Async(this IAuthenticateOperations operations, string provider, string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get3WithHttpMessagesAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static AuthenticateResponse Create3(this IAuthenticateOperations operations, string provider, string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json")
            {
                return operations.Create3Async(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticateResponse> Create3Async(this IAuthenticateOperations operations, string provider, string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Create3WithHttpMessagesAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static AuthenticateResponse Post3(this IAuthenticateOperations operations, string provider, string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json")
            {
                return operations.Post3Async(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticateResponse> Post3Async(this IAuthenticateOperations operations, string provider, string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post3WithHttpMessagesAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static AuthenticateResponse Delete3(this IAuthenticateOperations operations, string provider, string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json")
            {
                return operations.Delete3Async(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='oauthToken'>
            /// </param>
            /// <param name='oauthVerifier'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='rememberMe'>
            /// </param>
            /// <param name='continueParameter'>
            /// </param>
            /// <param name='nonce'>
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='response'>
            /// </param>
            /// <param name='qop'>
            /// </param>
            /// <param name='nc'>
            /// </param>
            /// <param name='cnonce'>
            /// </param>
            /// <param name='useTokenCookie'>
            /// </param>
            /// <param name='meta'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticateResponse> Delete3Async(this IAuthenticateOperations operations, string provider, string state = default(string), string oauthToken = default(string), string oauthVerifier = default(string), string userName = default(string), string password = default(string), bool? rememberMe = default(bool?), string continueParameter = default(string), string nonce = default(string), string uri = default(string), string response = default(string), string qop = default(string), string nc = default(string), string cnonce = default(string), bool? useTokenCookie = default(bool?), object meta = default(object), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Delete3WithHttpMessagesAsync(provider, state, oauthToken, oauthVerifier, userName, password, rememberMe, continueParameter, nonce, uri, response, qop, nc, cnonce, useTokenCookie, meta, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
