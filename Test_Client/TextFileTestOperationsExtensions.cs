// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TestClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TextFileTestOperations.
    /// </summary>
    public static partial class TextFileTestOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asAttachment'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static string Get(this ITextFileTestOperations operations, bool? asAttachment = default(bool?), string format = "json")
            {
                return operations.GetAsync(asAttachment, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asAttachment'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetAsync(this ITextFileTestOperations operations, bool? asAttachment = default(bool?), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(asAttachment, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asAttachment'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static string Create(this ITextFileTestOperations operations, bool? asAttachment = default(bool?), string format = "json")
            {
                return operations.CreateAsync(asAttachment, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asAttachment'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CreateAsync(this ITextFileTestOperations operations, bool? asAttachment = default(bool?), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(asAttachment, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asAttachment'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static string Post(this ITextFileTestOperations operations, bool? asAttachment = default(bool?), string format = "json")
            {
                return operations.PostAsync(asAttachment, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asAttachment'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> PostAsync(this ITextFileTestOperations operations, bool? asAttachment = default(bool?), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(asAttachment, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asAttachment'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static string Delete(this ITextFileTestOperations operations, bool? asAttachment = default(bool?), string format = "json")
            {
                return operations.DeleteAsync(asAttachment, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asAttachment'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DeleteAsync(this ITextFileTestOperations operations, bool? asAttachment = default(bool?), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(asAttachment, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
