// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TestClient
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// EchoTypesOperations operations.
    /// </summary>
    public partial class EchoTypesOperations : IServiceOperations<Test>, IEchoTypesOperations
    {
        /// <summary>
        /// Initializes a new instance of the EchoTypesOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public EchoTypesOperations(Test client)
        {
            if (client == null)
            {
                throw new System.ArgumentNullException("client");
            }
            Client = client;
        }

        /// <summary>
        /// Gets a reference to the Test
        /// </summary>
        public Test Client { get; private set; }

        /// <param name='byteParameter'>
        /// </param>
        /// <param name='shortParameter'>
        /// </param>
        /// <param name='intParameter'>
        /// </param>
        /// <param name='longParameter'>
        /// </param>
        /// <param name='uShortParameter'>
        /// </param>
        /// <param name='uIntParameter'>
        /// </param>
        /// <param name='uLongParameter'>
        /// </param>
        /// <param name='floatParameter'>
        /// </param>
        /// <param name='doubleParameter'>
        /// </param>
        /// <param name='decimalParameter'>
        /// </param>
        /// <param name='stringParameter'>
        /// </param>
        /// <param name='dateTime'>
        /// </param>
        /// <param name='timeSpan'>
        /// </param>
        /// <param name='dateTimeOffset'>
        /// </param>
        /// <param name='guid'>
        /// </param>
        /// <param name='charParameter'>
        /// </param>
        /// <param name='format'>
        /// Specifies response output format
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="EchoTypesException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<EchoTypes>> GetWithHttpMessagesAsync(byte[] byteParameter = default(byte[]), int? shortParameter = default(int?), int? intParameter = default(int?), long? longParameter = default(long?), int? uShortParameter = default(int?), int? uIntParameter = default(int?), long? uLongParameter = default(long?), double? floatParameter = default(double?), double? doubleParameter = default(double?), double? decimalParameter = default(double?), string stringParameter = default(string), System.DateTime? dateTime = default(System.DateTime?), string timeSpan = default(string), string dateTimeOffset = default(string), string guid = default(string), string charParameter = default(string), string format = "json", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("byteParameter", byteParameter);
                tracingParameters.Add("shortParameter", shortParameter);
                tracingParameters.Add("intParameter", intParameter);
                tracingParameters.Add("longParameter", longParameter);
                tracingParameters.Add("uShortParameter", uShortParameter);
                tracingParameters.Add("uIntParameter", uIntParameter);
                tracingParameters.Add("uLongParameter", uLongParameter);
                tracingParameters.Add("floatParameter", floatParameter);
                tracingParameters.Add("doubleParameter", doubleParameter);
                tracingParameters.Add("decimalParameter", decimalParameter);
                tracingParameters.Add("stringParameter", stringParameter);
                tracingParameters.Add("dateTime", dateTime);
                tracingParameters.Add("timeSpan", timeSpan);
                tracingParameters.Add("dateTimeOffset", dateTimeOffset);
                tracingParameters.Add("guid", guid);
                tracingParameters.Add("charParameter", charParameter);
                tracingParameters.Add("format", format);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "Get", tracingParameters);
            }
            // Construct URL
            var _baseUrl = Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "echo/types").ToString();
            List<string> _queryParameters = new List<string>();
            if (byteParameter != null)
            {
                _queryParameters.Add(string.Format("Byte={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(byteParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (shortParameter != null)
            {
                _queryParameters.Add(string.Format("Short={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(shortParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (intParameter != null)
            {
                _queryParameters.Add(string.Format("Int={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(intParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (longParameter != null)
            {
                _queryParameters.Add(string.Format("Long={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(longParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (uShortParameter != null)
            {
                _queryParameters.Add(string.Format("UShort={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(uShortParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (uIntParameter != null)
            {
                _queryParameters.Add(string.Format("UInt={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(uIntParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (uLongParameter != null)
            {
                _queryParameters.Add(string.Format("ULong={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(uLongParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (floatParameter != null)
            {
                _queryParameters.Add(string.Format("Float={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(floatParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (doubleParameter != null)
            {
                _queryParameters.Add(string.Format("Double={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(doubleParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (decimalParameter != null)
            {
                _queryParameters.Add(string.Format("Decimal={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(decimalParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (stringParameter != null)
            {
                _queryParameters.Add(string.Format("String={0}", System.Uri.EscapeDataString(stringParameter)));
            }
            if (dateTime != null)
            {
                _queryParameters.Add(string.Format("DateTime={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(dateTime, Client.SerializationSettings).Trim('"'))));
            }
            if (timeSpan != null)
            {
                _queryParameters.Add(string.Format("TimeSpan={0}", System.Uri.EscapeDataString(timeSpan)));
            }
            if (dateTimeOffset != null)
            {
                _queryParameters.Add(string.Format("DateTimeOffset={0}", System.Uri.EscapeDataString(dateTimeOffset)));
            }
            if (guid != null)
            {
                _queryParameters.Add(string.Format("Guid={0}", System.Uri.EscapeDataString(guid)));
            }
            if (charParameter != null)
            {
                _queryParameters.Add(string.Format("Char={0}", System.Uri.EscapeDataString(charParameter)));
            }
            if (format != null)
            {
                _queryParameters.Add(string.Format("format={0}", System.Uri.EscapeDataString(format)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if (!_httpResponse.IsSuccessStatusCode)
            {
                var ex = new EchoTypesException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    EchoTypes _errorBody =  Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<EchoTypes>(_responseContent, Client.DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<EchoTypes>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            string _defaultResponseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            try
            {
                _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<EchoTypes>(_defaultResponseContent, Client.DeserializationSettings);
            }
            catch (JsonException ex)
            {
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw new SerializationException("Unable to deserialize the response.", _defaultResponseContent, ex);
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='byteParameter'>
        /// </param>
        /// <param name='shortParameter'>
        /// </param>
        /// <param name='intParameter'>
        /// </param>
        /// <param name='longParameter'>
        /// </param>
        /// <param name='uShortParameter'>
        /// </param>
        /// <param name='uIntParameter'>
        /// </param>
        /// <param name='uLongParameter'>
        /// </param>
        /// <param name='floatParameter'>
        /// </param>
        /// <param name='doubleParameter'>
        /// </param>
        /// <param name='decimalParameter'>
        /// </param>
        /// <param name='stringParameter'>
        /// </param>
        /// <param name='dateTime'>
        /// </param>
        /// <param name='timeSpan'>
        /// </param>
        /// <param name='dateTimeOffset'>
        /// </param>
        /// <param name='guid'>
        /// </param>
        /// <param name='charParameter'>
        /// </param>
        /// <param name='format'>
        /// Specifies response output format
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="EchoTypesException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<EchoTypes>> CreateWithHttpMessagesAsync(byte[] byteParameter = default(byte[]), int? shortParameter = default(int?), int? intParameter = default(int?), long? longParameter = default(long?), int? uShortParameter = default(int?), int? uIntParameter = default(int?), long? uLongParameter = default(long?), double? floatParameter = default(double?), double? doubleParameter = default(double?), double? decimalParameter = default(double?), string stringParameter = default(string), System.DateTime? dateTime = default(System.DateTime?), string timeSpan = default(string), string dateTimeOffset = default(string), string guid = default(string), string charParameter = default(string), string format = "json", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("byteParameter", byteParameter);
                tracingParameters.Add("shortParameter", shortParameter);
                tracingParameters.Add("intParameter", intParameter);
                tracingParameters.Add("longParameter", longParameter);
                tracingParameters.Add("uShortParameter", uShortParameter);
                tracingParameters.Add("uIntParameter", uIntParameter);
                tracingParameters.Add("uLongParameter", uLongParameter);
                tracingParameters.Add("floatParameter", floatParameter);
                tracingParameters.Add("doubleParameter", doubleParameter);
                tracingParameters.Add("decimalParameter", decimalParameter);
                tracingParameters.Add("stringParameter", stringParameter);
                tracingParameters.Add("dateTime", dateTime);
                tracingParameters.Add("timeSpan", timeSpan);
                tracingParameters.Add("dateTimeOffset", dateTimeOffset);
                tracingParameters.Add("guid", guid);
                tracingParameters.Add("charParameter", charParameter);
                tracingParameters.Add("format", format);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "Create", tracingParameters);
            }
            // Construct URL
            var _baseUrl = Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "echo/types").ToString();
            List<string> _queryParameters = new List<string>();
            if (format != null)
            {
                _queryParameters.Add(string.Format("format={0}", System.Uri.EscapeDataString(format)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            MultipartFormDataContent _multiPartContent = new MultipartFormDataContent();
            if (byteParameter != null)
            {
                StringContent _byteParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(byteParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_byteParameter, "Byte");
            }
            if (shortParameter != null)
            {
                StringContent _shortParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(shortParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_shortParameter, "Short");
            }
            if (intParameter != null)
            {
                StringContent _intParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(intParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_intParameter, "Int");
            }
            if (longParameter != null)
            {
                StringContent _longParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(longParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_longParameter, "Long");
            }
            if (uShortParameter != null)
            {
                StringContent _uShortParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(uShortParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_uShortParameter, "UShort");
            }
            if (uIntParameter != null)
            {
                StringContent _uIntParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(uIntParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_uIntParameter, "UInt");
            }
            if (uLongParameter != null)
            {
                StringContent _uLongParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(uLongParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_uLongParameter, "ULong");
            }
            if (floatParameter != null)
            {
                StringContent _floatParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(floatParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_floatParameter, "Float");
            }
            if (doubleParameter != null)
            {
                StringContent _doubleParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(doubleParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_doubleParameter, "Double");
            }
            if (decimalParameter != null)
            {
                StringContent _decimalParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(decimalParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_decimalParameter, "Decimal");
            }
            if (stringParameter != null)
            {
                StringContent _stringParameter = new StringContent(stringParameter, System.Text.Encoding.UTF8);
                _multiPartContent.Add(_stringParameter, "String");
            }
            if (dateTime != null)
            {
                StringContent _dateTime = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(dateTime, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_dateTime, "DateTime");
            }
            if (timeSpan != null)
            {
                StringContent _timeSpan = new StringContent(timeSpan, System.Text.Encoding.UTF8);
                _multiPartContent.Add(_timeSpan, "TimeSpan");
            }
            if (dateTimeOffset != null)
            {
                StringContent _dateTimeOffset = new StringContent(dateTimeOffset, System.Text.Encoding.UTF8);
                _multiPartContent.Add(_dateTimeOffset, "DateTimeOffset");
            }
            if (guid != null)
            {
                StringContent _guid = new StringContent(guid, System.Text.Encoding.UTF8);
                _multiPartContent.Add(_guid, "Guid");
            }
            if (charParameter != null)
            {
                StringContent _charParameter = new StringContent(charParameter, System.Text.Encoding.UTF8);
                _multiPartContent.Add(_charParameter, "Char");
            }
            _httpRequest.Content = _multiPartContent;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if (!_httpResponse.IsSuccessStatusCode)
            {
                var ex = new EchoTypesException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    EchoTypes _errorBody =  Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<EchoTypes>(_responseContent, Client.DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<EchoTypes>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            string _defaultResponseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            try
            {
                _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<EchoTypes>(_defaultResponseContent, Client.DeserializationSettings);
            }
            catch (JsonException ex)
            {
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw new SerializationException("Unable to deserialize the response.", _defaultResponseContent, ex);
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='byteParameter'>
        /// </param>
        /// <param name='shortParameter'>
        /// </param>
        /// <param name='intParameter'>
        /// </param>
        /// <param name='longParameter'>
        /// </param>
        /// <param name='uShortParameter'>
        /// </param>
        /// <param name='uIntParameter'>
        /// </param>
        /// <param name='uLongParameter'>
        /// </param>
        /// <param name='floatParameter'>
        /// </param>
        /// <param name='doubleParameter'>
        /// </param>
        /// <param name='decimalParameter'>
        /// </param>
        /// <param name='stringParameter'>
        /// </param>
        /// <param name='dateTime'>
        /// </param>
        /// <param name='timeSpan'>
        /// </param>
        /// <param name='dateTimeOffset'>
        /// </param>
        /// <param name='guid'>
        /// </param>
        /// <param name='charParameter'>
        /// </param>
        /// <param name='format'>
        /// Specifies response output format
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="EchoTypesException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<EchoTypes>> PostWithHttpMessagesAsync(byte[] byteParameter = default(byte[]), int? shortParameter = default(int?), int? intParameter = default(int?), long? longParameter = default(long?), int? uShortParameter = default(int?), int? uIntParameter = default(int?), long? uLongParameter = default(long?), double? floatParameter = default(double?), double? doubleParameter = default(double?), double? decimalParameter = default(double?), string stringParameter = default(string), System.DateTime? dateTime = default(System.DateTime?), string timeSpan = default(string), string dateTimeOffset = default(string), string guid = default(string), string charParameter = default(string), string format = "json", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("byteParameter", byteParameter);
                tracingParameters.Add("shortParameter", shortParameter);
                tracingParameters.Add("intParameter", intParameter);
                tracingParameters.Add("longParameter", longParameter);
                tracingParameters.Add("uShortParameter", uShortParameter);
                tracingParameters.Add("uIntParameter", uIntParameter);
                tracingParameters.Add("uLongParameter", uLongParameter);
                tracingParameters.Add("floatParameter", floatParameter);
                tracingParameters.Add("doubleParameter", doubleParameter);
                tracingParameters.Add("decimalParameter", decimalParameter);
                tracingParameters.Add("stringParameter", stringParameter);
                tracingParameters.Add("dateTime", dateTime);
                tracingParameters.Add("timeSpan", timeSpan);
                tracingParameters.Add("dateTimeOffset", dateTimeOffset);
                tracingParameters.Add("guid", guid);
                tracingParameters.Add("charParameter", charParameter);
                tracingParameters.Add("format", format);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "Post", tracingParameters);
            }
            // Construct URL
            var _baseUrl = Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "echo/types").ToString();
            List<string> _queryParameters = new List<string>();
            if (format != null)
            {
                _queryParameters.Add(string.Format("format={0}", System.Uri.EscapeDataString(format)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            MultipartFormDataContent _multiPartContent = new MultipartFormDataContent();
            if (byteParameter != null)
            {
                StringContent _byteParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(byteParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_byteParameter, "Byte");
            }
            if (shortParameter != null)
            {
                StringContent _shortParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(shortParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_shortParameter, "Short");
            }
            if (intParameter != null)
            {
                StringContent _intParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(intParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_intParameter, "Int");
            }
            if (longParameter != null)
            {
                StringContent _longParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(longParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_longParameter, "Long");
            }
            if (uShortParameter != null)
            {
                StringContent _uShortParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(uShortParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_uShortParameter, "UShort");
            }
            if (uIntParameter != null)
            {
                StringContent _uIntParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(uIntParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_uIntParameter, "UInt");
            }
            if (uLongParameter != null)
            {
                StringContent _uLongParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(uLongParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_uLongParameter, "ULong");
            }
            if (floatParameter != null)
            {
                StringContent _floatParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(floatParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_floatParameter, "Float");
            }
            if (doubleParameter != null)
            {
                StringContent _doubleParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(doubleParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_doubleParameter, "Double");
            }
            if (decimalParameter != null)
            {
                StringContent _decimalParameter = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(decimalParameter, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_decimalParameter, "Decimal");
            }
            if (stringParameter != null)
            {
                StringContent _stringParameter = new StringContent(stringParameter, System.Text.Encoding.UTF8);
                _multiPartContent.Add(_stringParameter, "String");
            }
            if (dateTime != null)
            {
                StringContent _dateTime = new StringContent(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(dateTime, Client.SerializationSettings).Trim('"'), System.Text.Encoding.UTF8);
                _multiPartContent.Add(_dateTime, "DateTime");
            }
            if (timeSpan != null)
            {
                StringContent _timeSpan = new StringContent(timeSpan, System.Text.Encoding.UTF8);
                _multiPartContent.Add(_timeSpan, "TimeSpan");
            }
            if (dateTimeOffset != null)
            {
                StringContent _dateTimeOffset = new StringContent(dateTimeOffset, System.Text.Encoding.UTF8);
                _multiPartContent.Add(_dateTimeOffset, "DateTimeOffset");
            }
            if (guid != null)
            {
                StringContent _guid = new StringContent(guid, System.Text.Encoding.UTF8);
                _multiPartContent.Add(_guid, "Guid");
            }
            if (charParameter != null)
            {
                StringContent _charParameter = new StringContent(charParameter, System.Text.Encoding.UTF8);
                _multiPartContent.Add(_charParameter, "Char");
            }
            _httpRequest.Content = _multiPartContent;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if (!_httpResponse.IsSuccessStatusCode)
            {
                var ex = new EchoTypesException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    EchoTypes _errorBody =  Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<EchoTypes>(_responseContent, Client.DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<EchoTypes>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            string _defaultResponseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            try
            {
                _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<EchoTypes>(_defaultResponseContent, Client.DeserializationSettings);
            }
            catch (JsonException ex)
            {
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw new SerializationException("Unable to deserialize the response.", _defaultResponseContent, ex);
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <param name='byteParameter'>
        /// </param>
        /// <param name='shortParameter'>
        /// </param>
        /// <param name='intParameter'>
        /// </param>
        /// <param name='longParameter'>
        /// </param>
        /// <param name='uShortParameter'>
        /// </param>
        /// <param name='uIntParameter'>
        /// </param>
        /// <param name='uLongParameter'>
        /// </param>
        /// <param name='floatParameter'>
        /// </param>
        /// <param name='doubleParameter'>
        /// </param>
        /// <param name='decimalParameter'>
        /// </param>
        /// <param name='stringParameter'>
        /// </param>
        /// <param name='dateTime'>
        /// </param>
        /// <param name='timeSpan'>
        /// </param>
        /// <param name='dateTimeOffset'>
        /// </param>
        /// <param name='guid'>
        /// </param>
        /// <param name='charParameter'>
        /// </param>
        /// <param name='format'>
        /// Specifies response output format
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="EchoTypesException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<EchoTypes>> DeleteWithHttpMessagesAsync(byte[] byteParameter = default(byte[]), int? shortParameter = default(int?), int? intParameter = default(int?), long? longParameter = default(long?), int? uShortParameter = default(int?), int? uIntParameter = default(int?), long? uLongParameter = default(long?), double? floatParameter = default(double?), double? doubleParameter = default(double?), double? decimalParameter = default(double?), string stringParameter = default(string), System.DateTime? dateTime = default(System.DateTime?), string timeSpan = default(string), string dateTimeOffset = default(string), string guid = default(string), string charParameter = default(string), string format = "json", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("byteParameter", byteParameter);
                tracingParameters.Add("shortParameter", shortParameter);
                tracingParameters.Add("intParameter", intParameter);
                tracingParameters.Add("longParameter", longParameter);
                tracingParameters.Add("uShortParameter", uShortParameter);
                tracingParameters.Add("uIntParameter", uIntParameter);
                tracingParameters.Add("uLongParameter", uLongParameter);
                tracingParameters.Add("floatParameter", floatParameter);
                tracingParameters.Add("doubleParameter", doubleParameter);
                tracingParameters.Add("decimalParameter", decimalParameter);
                tracingParameters.Add("stringParameter", stringParameter);
                tracingParameters.Add("dateTime", dateTime);
                tracingParameters.Add("timeSpan", timeSpan);
                tracingParameters.Add("dateTimeOffset", dateTimeOffset);
                tracingParameters.Add("guid", guid);
                tracingParameters.Add("charParameter", charParameter);
                tracingParameters.Add("format", format);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "Delete", tracingParameters);
            }
            // Construct URL
            var _baseUrl = Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "echo/types").ToString();
            List<string> _queryParameters = new List<string>();
            if (byteParameter != null)
            {
                _queryParameters.Add(string.Format("Byte={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(byteParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (shortParameter != null)
            {
                _queryParameters.Add(string.Format("Short={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(shortParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (intParameter != null)
            {
                _queryParameters.Add(string.Format("Int={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(intParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (longParameter != null)
            {
                _queryParameters.Add(string.Format("Long={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(longParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (uShortParameter != null)
            {
                _queryParameters.Add(string.Format("UShort={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(uShortParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (uIntParameter != null)
            {
                _queryParameters.Add(string.Format("UInt={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(uIntParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (uLongParameter != null)
            {
                _queryParameters.Add(string.Format("ULong={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(uLongParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (floatParameter != null)
            {
                _queryParameters.Add(string.Format("Float={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(floatParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (doubleParameter != null)
            {
                _queryParameters.Add(string.Format("Double={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(doubleParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (decimalParameter != null)
            {
                _queryParameters.Add(string.Format("Decimal={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(decimalParameter, Client.SerializationSettings).Trim('"'))));
            }
            if (stringParameter != null)
            {
                _queryParameters.Add(string.Format("String={0}", System.Uri.EscapeDataString(stringParameter)));
            }
            if (dateTime != null)
            {
                _queryParameters.Add(string.Format("DateTime={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(dateTime, Client.SerializationSettings).Trim('"'))));
            }
            if (timeSpan != null)
            {
                _queryParameters.Add(string.Format("TimeSpan={0}", System.Uri.EscapeDataString(timeSpan)));
            }
            if (dateTimeOffset != null)
            {
                _queryParameters.Add(string.Format("DateTimeOffset={0}", System.Uri.EscapeDataString(dateTimeOffset)));
            }
            if (guid != null)
            {
                _queryParameters.Add(string.Format("Guid={0}", System.Uri.EscapeDataString(guid)));
            }
            if (charParameter != null)
            {
                _queryParameters.Add(string.Format("Char={0}", System.Uri.EscapeDataString(charParameter)));
            }
            if (format != null)
            {
                _queryParameters.Add(string.Format("format={0}", System.Uri.EscapeDataString(format)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("DELETE");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if (!_httpResponse.IsSuccessStatusCode)
            {
                var ex = new EchoTypesException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    EchoTypes _errorBody =  Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<EchoTypes>(_responseContent, Client.DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<EchoTypes>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            string _defaultResponseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            try
            {
                _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<EchoTypes>(_defaultResponseContent, Client.DeserializationSettings);
            }
            catch (JsonException ex)
            {
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw new SerializationException("Unable to deserialize the response.", _defaultResponseContent, ex);
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

    }
}
