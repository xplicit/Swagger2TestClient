// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TestClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for HelloZipOperations.
    /// </summary>
    public static partial class HelloZipOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='test'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static HelloZipResponse Get(this IHelloZipOperations operations, string name = default(string), IList<string> test = default(IList<string>), string format = "json")
            {
                return operations.GetAsync(name, test, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='test'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HelloZipResponse> GetAsync(this IHelloZipOperations operations, string name = default(string), IList<string> test = default(IList<string>), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(name, test, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='test'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static HelloZipResponse Create(this IHelloZipOperations operations, string name = default(string), IList<string> test = default(IList<string>), string format = "json")
            {
                return operations.CreateAsync(name, test, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='test'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HelloZipResponse> CreateAsync(this IHelloZipOperations operations, string name = default(string), IList<string> test = default(IList<string>), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(name, test, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='test'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static HelloZipResponse Post(this IHelloZipOperations operations, string name = default(string), IList<string> test = default(IList<string>), string format = "json")
            {
                return operations.PostAsync(name, test, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='test'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HelloZipResponse> PostAsync(this IHelloZipOperations operations, string name = default(string), IList<string> test = default(IList<string>), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(name, test, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='test'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static HelloZipResponse Delete(this IHelloZipOperations operations, string name = default(string), IList<string> test = default(IList<string>), string format = "json")
            {
                return operations.DeleteAsync(name, test, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='test'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HelloZipResponse> DeleteAsync(this IHelloZipOperations operations, string name = default(string), IList<string> test = default(IList<string>), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(name, test, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
